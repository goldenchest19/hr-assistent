{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Ключ для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Функция для входа пользователя\n  const login = async (email, password) => {\n    // В реальном приложении здесь будет запрос к API\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Временная заглушка для авторизации\n        if (email === 'admin@example.com' && password === 'password') {\n          const userData = {\n            id: '1',\n            email,\n            name: 'Администратор',\n            role: 'admin'\n          };\n\n          // Сохраняем данные авторизации\n          const authData = {\n            user: userData,\n            token: 'mock-jwt-token'\n          };\n\n          // Сохраняем в localStorage\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n\n          // Обновляем состояние\n          setUser(userData);\n          resolve(userData);\n        } else {\n          reject(new Error('Неверный email или пароль'));\n        }\n      }, 1000);\n    });\n  };\n\n  // Функция для регистрации\n  const register = async userData => {\n    // В реальном приложении здесь будет запрос к API\n    return new Promise(resolve => {\n      setTimeout(() => {\n        console.log('Регистрация пользователя:', userData);\n        resolve({\n          success: true\n        });\n      }, 1000);\n    });\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    // Удаляем данные из localStorage\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    // Сбрасываем состояние\n    setUser(null);\n  };\n\n  // Проверка авторизации\n  const isAuthenticated = !!user;\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования контекста авторизации\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AUTH_STORAGE_KEY","AuthProvider","children","_s","user","setUser","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","error","console","removeItem","login","email","password","Promise","resolve","reject","setTimeout","userData","id","name","role","authData","token","setItem","stringify","Error","register","log","success","logout","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nconst AuthContext = createContext(null);\n\n// Ключ для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Функция для входа пользователя\n  const login = async (email, password) => {\n    // В реальном приложении здесь будет запрос к API\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Временная заглушка для авторизации\n        if (email === 'admin@example.com' && password === 'password') {\n          const userData = {\n            id: '1',\n            email,\n            name: 'Администратор',\n            role: 'admin'\n          };\n          \n          // Сохраняем данные авторизации\n          const authData = {\n            user: userData,\n            token: 'mock-jwt-token'\n          };\n          \n          // Сохраняем в localStorage\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n          \n          // Обновляем состояние\n          setUser(userData);\n          \n          resolve(userData);\n        } else {\n          reject(new Error('Неверный email или пароль'));\n        }\n      }, 1000);\n    });\n  };\n\n  // Функция для регистрации\n  const register = async (userData) => {\n    // В реальном приложении здесь будет запрос к API\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        console.log('Регистрация пользователя:', userData);\n        resolve({ success: true });\n      }, 1000);\n    });\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    // Удаляем данные из localStorage\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    // Сбрасываем состояние\n    setUser(null);\n  };\n\n  // Проверка авторизации\n  const isAuthenticated = !!user;\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для использования контекста авторизации\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\n\n// Базовый URL API\nconst API_BASE_URL = 'http://localhost:8081/api';\n\n// Создание экземпляра axios с общими настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(config => {\n  const auth = localStorage.getItem('hr_partner_auth');\n  if (auth) {\n    try {\n      const parsed = JSON.parse(auth);\n      if (parsed.token) {\n        config.headers.Authorization = `Bearer ${parsed.token}`;\n      }\n    } catch (e) {}\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// API для работы с аутентификацией\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData)\n};\n\n// API для работы с вакансиями\nexport const vacancyAPI = {\n  getAll: () => api.get('/vacancies'),\n  getById: id => api.get(`/vacancies/${id}`),\n  create: data => api.post('/vacancies', data),\n  update: (id, data) => api.put(`/vacancies/${id}`, data),\n  delete: id => api.delete(`/vacancies/${id}`)\n};\n\n// API для работы с резюме\nexport const resumeAPI = {\n  getAll: () => api.get('/resumes'),\n  getById: id => api.get(`/resumes/${id}`),\n  create: data => api.post('/resumes', data),\n  update: (id, data) => api.put(`/resumes/${id}`, data),\n  delete: id => api.delete(`/resumes/${id}`)\n};\n\n// API для работы с офферами\nexport const offerAPI = {\n  getAll: () => api.get('/offers'),\n  getById: id => api.get(`/offers/${id}`),\n  create: data => api.post('/offers', data),\n  update: (id, data) => api.put(`/offers/${id}`, data),\n  delete: id => api.delete(`/offers/${id}`)\n};\n\n// API для работы с откликами на вакансии\nexport const jobApplicationAPI = {\n  getAll: () => api.get('/job-applications'),\n  getById: id => api.get(`/job-applications/${id}`),\n  create: data => api.post('/job-applications', data),\n  update: (id, data) => api.put(`/job-applications/${id}`, data),\n  delete: id => api.delete(`/job-applications/${id}`)\n};\n\n// API для работы с сопоставлением (matching)\nexport const matchingAPI = {\n  // Сопоставление по файлу резюме (PDF) и URL вакансии\n  matchResumeFileToVacancyUrl: (formData, vacancyUrl) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyUrl', vacancyUrl);\n    return api.post('/matching/resume-file', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Сопоставление по URL резюме и URL вакансии\n  matchResumeUrlToVacancyUrl: (resumeUrl, vacancyUrl) => {\n    return api.post('/matching/resume-url', {\n      resumeUrl,\n      vacancyUrl\n    });\n  },\n  // Сопоставление по текстовому резюме и URL вакансии\n  matchResumeTextToVacancyUrl: (resumeText, vacancyUrl) => {\n    return api.post('/matching/resume-text-vacancy-url', {\n      resumeText,\n      vacancyUrl\n    });\n  },\n  // Сопоставление по файлу резюме (PDF) и текстовой вакансии\n  matchResumeFileToVacancyText: (formData, vacancyText) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyText', vacancyText);\n    return api.post('/matching/resume-file-vacancy-text', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Сопоставление по URL резюме и текстовой вакансии\n  matchResumeUrlToVacancyText: (resumeUrl, vacancyText) => {\n    return api.post('/matching/resume-url-vacancy-text', {\n      resumeUrl,\n      vacancyText\n    });\n  },\n  // Сопоставление по текстовому резюме и текстовой вакансии\n  matchResumeTextToVacancyText: (resumeText, vacancyText) => {\n    return api.post('/matching/resume-text-vacancy-text', {\n      resumeText,\n      vacancyText\n    });\n  },\n  // Получение истории сопоставлений\n  getMatchingHistory: params => api.get('/matching/history', {\n    params\n  }),\n  // Получение сохраненного сопоставления по ID\n  getMatchingById: id => api.get(`/matching/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","auth","localStorage","getItem","parsed","JSON","parse","token","Authorization","e","error","Promise","reject","authAPI","login","credentials","post","register","userData","vacancyAPI","getAll","get","getById","id","data","update","put","delete","resumeAPI","offerAPI","jobApplicationAPI","matchingAPI","matchResumeFileToVacancyUrl","formData","vacancyUrl","FormData","append","file","email","matchResumeUrlToVacancyUrl","resumeUrl","matchResumeTextToVacancyUrl","resumeText","matchResumeFileToVacancyText","vacancyText","matchResumeUrlToVacancyText","matchResumeTextToVacancyText","getMatchingHistory","params","getMatchingById"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Базовый URL API\nconst API_BASE_URL = 'http://localhost:8081/api';\n\n// Создание экземпляра axios с общими настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(\n  (config) => {\n    const auth = localStorage.getItem('hr_partner_auth');\n    if (auth) {\n      try {\n        const parsed = JSON.parse(auth);\n        if (parsed.token) {\n          config.headers.Authorization = `Bearer ${parsed.token}`;\n        }\n      } catch (e) {}\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// API для работы с аутентификацией\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n};\n\n// API для работы с вакансиями\nexport const vacancyAPI = {\n  getAll: () => api.get('/vacancies'),\n  getById: (id) => api.get(`/vacancies/${id}`),\n  create: (data) => api.post('/vacancies', data),\n  update: (id, data) => api.put(`/vacancies/${id}`, data),\n  delete: (id) => api.delete(`/vacancies/${id}`),\n};\n\n// API для работы с резюме\nexport const resumeAPI = {\n  getAll: () => api.get('/resumes'),\n  getById: (id) => api.get(`/resumes/${id}`),\n  create: (data) => api.post('/resumes', data),\n  update: (id, data) => api.put(`/resumes/${id}`, data),\n  delete: (id) => api.delete(`/resumes/${id}`),\n};\n\n// API для работы с офферами\nexport const offerAPI = {\n  getAll: () => api.get('/offers'),\n  getById: (id) => api.get(`/offers/${id}`),\n  create: (data) => api.post('/offers', data),\n  update: (id, data) => api.put(`/offers/${id}`, data),\n  delete: (id) => api.delete(`/offers/${id}`),\n};\n\n// API для работы с откликами на вакансии\nexport const jobApplicationAPI = {\n  getAll: () => api.get('/job-applications'),\n  getById: (id) => api.get(`/job-applications/${id}`),\n  create: (data) => api.post('/job-applications', data),\n  update: (id, data) => api.put(`/job-applications/${id}`, data),\n  delete: (id) => api.delete(`/job-applications/${id}`),\n};\n\n// API для работы с сопоставлением (matching)\nexport const matchingAPI = {\n  // Сопоставление по файлу резюме (PDF) и URL вакансии\n  matchResumeFileToVacancyUrl: (formData, vacancyUrl) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyUrl', vacancyUrl);\n    return api.post('/matching/resume-file', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n  },\n  // Сопоставление по URL резюме и URL вакансии\n  matchResumeUrlToVacancyUrl: (resumeUrl, vacancyUrl) => {\n    return api.post('/matching/resume-url', { resumeUrl, vacancyUrl });\n  },\n  // Сопоставление по текстовому резюме и URL вакансии\n  matchResumeTextToVacancyUrl: (resumeText, vacancyUrl) => {\n    return api.post('/matching/resume-text-vacancy-url', { resumeText, vacancyUrl });\n  },\n  // Сопоставление по файлу резюме (PDF) и текстовой вакансии\n  matchResumeFileToVacancyText: (formData, vacancyText) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyText', vacancyText);\n    return api.post('/matching/resume-file-vacancy-text', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n  },\n  // Сопоставление по URL резюме и текстовой вакансии\n  matchResumeUrlToVacancyText: (resumeUrl, vacancyText) => {\n    return api.post('/matching/resume-url-vacancy-text', { resumeUrl, vacancyText });\n  },\n  // Сопоставление по текстовому резюме и текстовой вакансии\n  matchResumeTextToVacancyText: (resumeText, vacancyText) => {\n    return api.post('/matching/resume-text-vacancy-text', { resumeText, vacancyText });\n  },\n  // Получение истории сопоставлений\n  getMatchingHistory: (params) => api.get('/matching/history', { params }),\n  // Получение сохраненного сопоставления по ID\n  getMatchingById: (id) => api.get(`/matching/${id}`),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authAPI } from '../utils/api';\n\n// Создаем контекст авторизации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n        setToken(parsedAuth.token);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Вход через API\n  const login = async (email, password) => {\n    try {\n      const response = await authAPI.login({\n        email,\n        password\n      });\n      // Ожидаем, что backend возвращает токен и пользователя\n      const data = response.data;\n      const authData = {\n        user: data.user || {\n          email: data.email || email\n        },\n        token: data.token || data.accessToken || data.jwt || data.tokenValue || data\n      };\n      localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n      setUser(authData.user);\n      setToken(authData.token);\n      return authData.user;\n    } catch (error) {\n      throw new Error(error.response && error.response.data && error.response.data.message || error.message || 'Ошибка при авторизации');\n    }\n  };\n\n  // Регистрация через API\n  const register = async userData => {\n    try {\n      const response = await authAPI.register({\n        username: userData.name || userData.email.split('@')[0],\n        email: userData.email,\n        password: userData.password\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response && error.response.data && error.response.data.message || error.message || 'Ошибка при регистрации');\n    }\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    setUser(null);\n    setToken(null);\n  };\n  const isAuthenticated = !!user && !!token;\n  const value = {\n    user,\n    token,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования контекста авторизации\n_s(AuthProvider, \"uAkFQMmIUxfxJcQTEb8tCM/KFt4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","AUTH_STORAGE_KEY","AuthProvider","children","_s","user","setUser","token","setToken","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","error","console","removeItem","login","email","password","response","data","authData","accessToken","jwt","tokenValue","setItem","stringify","Error","message","register","userData","username","name","split","logout","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authAPI } from '../utils/api';\n\n// Создаем контекст авторизации\nconst AuthContext = createContext(null);\n\n// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n        setToken(parsedAuth.token);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Вход через API\n  const login = async (email, password) => {\n    try {\n      const response = await authAPI.login({ email, password });\n      // Ожидаем, что backend возвращает токен и пользователя\n      const data = response.data;\n          const authData = {\n        user: data.user || { email: data.email || email },\n        token: data.token || data.accessToken || data.jwt || data.tokenValue || data,\n          };\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n      setUser(authData.user);\n      setToken(authData.token);\n      return authData.user;\n    } catch (error) {\n      throw new Error(\n        (error.response && error.response.data && error.response.data.message) ||\n        error.message ||\n        'Ошибка при авторизации'\n      );\n        }\n  };\n\n  // Регистрация через API\n  const register = async (userData) => {\n    try {\n      const response = await authAPI.register({\n        username: userData.name || userData.email.split('@')[0],\n          email: userData.email,\n          password: userData.password,\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(\n        (error.response && error.response.data && error.response.data.message) ||\n        error.message ||\n        'Ошибка при регистрации'\n      );\n    }\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    setUser(null);\n    setToken(null);\n  };\n\n  const isAuthenticated = !!user && !!token;\n\n  const value = {\n    user,\n    token,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для использования контекста авторизации\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
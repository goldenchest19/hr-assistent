{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\nconst USERS_STORAGE_KEY = 'hr_partner_users';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n\n    // Проверяем, существуют ли зарегистрированные пользователи\n    const storedUsers = localStorage.getItem(USERS_STORAGE_KEY);\n    if (!storedUsers) {\n      // Если пользователей нет, создаем админа по умолчанию\n      const defaultUsers = [{\n        id: '1',\n        email: 'admin@example.com',\n        password: 'password',\n        name: 'Администратор',\n        role: 'admin'\n      }];\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(defaultUsers));\n    }\n    setLoading(false);\n  }, []);\n\n  // Получение списка зарегистрированных пользователей\n  const getUsers = () => {\n    const storedUsers = localStorage.getItem(USERS_STORAGE_KEY);\n    return storedUsers ? JSON.parse(storedUsers) : [];\n  };\n\n  // Функция для входа пользователя\n  const login = async (email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = getUsers();\n        const foundUser = users.find(user => user.email === email && user.password === password);\n        if (foundUser) {\n          // Создаем копию пользователя без пароля для безопасности\n          const userData = {\n            ...foundUser\n          };\n          delete userData.password;\n\n          // Сохраняем данные авторизации\n          const authData = {\n            user: userData,\n            token: 'mock-jwt-token'\n          };\n\n          // Сохраняем в localStorage\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n\n          // Обновляем состояние\n          setUser(userData);\n          resolve(userData);\n        } else {\n          reject(new Error('Неверный email или пароль'));\n        }\n      }, 1000);\n    });\n  };\n\n  // Функция для регистрации\n  const register = async userData => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = getUsers();\n\n        // Проверка, существует ли пользователь с таким email\n        const existingUser = users.find(user => user.email === userData.email);\n        if (existingUser) {\n          reject(new Error('Пользователь с таким email уже существует'));\n          return;\n        }\n\n        // Создаем нового пользователя\n        const newUser = {\n          id: String(users.length + 1),\n          email: userData.email,\n          password: userData.password,\n          name: userData.name || userData.email.split('@')[0],\n          role: 'user'\n        };\n\n        // Добавляем пользователя в список\n        users.push(newUser);\n        localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n\n        // Успешная регистрация\n        resolve({\n          success: true\n        });\n      }, 1000);\n    });\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    // Удаляем данные из localStorage\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    // Сбрасываем состояние\n    setUser(null);\n  };\n\n  // Проверка авторизации\n  const isAuthenticated = !!user;\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования контекста авторизации\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AUTH_STORAGE_KEY","USERS_STORAGE_KEY","AuthProvider","children","_s","user","setUser","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","error","console","removeItem","storedUsers","defaultUsers","id","email","password","name","role","setItem","stringify","getUsers","login","Promise","resolve","reject","setTimeout","users","foundUser","find","userData","authData","token","Error","register","existingUser","newUser","String","length","split","push","success","logout","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nconst AuthContext = createContext(null);\n\n// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\nconst USERS_STORAGE_KEY = 'hr_partner_users';\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    \n    // Проверяем, существуют ли зарегистрированные пользователи\n    const storedUsers = localStorage.getItem(USERS_STORAGE_KEY);\n    if (!storedUsers) {\n      // Если пользователей нет, создаем админа по умолчанию\n      const defaultUsers = [\n        {\n          id: '1',\n          email: 'admin@example.com',\n          password: 'password',\n          name: 'Администратор',\n          role: 'admin'\n        }\n      ];\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(defaultUsers));\n    }\n    \n    setLoading(false);\n  }, []);\n\n  // Получение списка зарегистрированных пользователей\n  const getUsers = () => {\n    const storedUsers = localStorage.getItem(USERS_STORAGE_KEY);\n    return storedUsers ? JSON.parse(storedUsers) : [];\n  };\n\n  // Функция для входа пользователя\n  const login = async (email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = getUsers();\n        const foundUser = users.find(\n          user => user.email === email && user.password === password\n        );\n        \n        if (foundUser) {\n          // Создаем копию пользователя без пароля для безопасности\n          const userData = { ...foundUser };\n          delete userData.password;\n          \n          // Сохраняем данные авторизации\n          const authData = {\n            user: userData,\n            token: 'mock-jwt-token'\n          };\n          \n          // Сохраняем в localStorage\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n          \n          // Обновляем состояние\n          setUser(userData);\n          \n          resolve(userData);\n        } else {\n          reject(new Error('Неверный email или пароль'));\n        }\n      }, 1000);\n    });\n  };\n\n  // Функция для регистрации\n  const register = async (userData) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = getUsers();\n        \n        // Проверка, существует ли пользователь с таким email\n        const existingUser = users.find(user => user.email === userData.email);\n        if (existingUser) {\n          reject(new Error('Пользователь с таким email уже существует'));\n          return;\n        }\n        \n        // Создаем нового пользователя\n        const newUser = {\n          id: String(users.length + 1),\n          email: userData.email,\n          password: userData.password,\n          name: userData.name || userData.email.split('@')[0],\n          role: 'user'\n        };\n        \n        // Добавляем пользователя в список\n        users.push(newUser);\n        localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n        \n        // Успешная регистрация\n        resolve({ success: true });\n      }, 1000);\n    });\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    // Удаляем данные из localStorage\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    // Сбрасываем состояние\n    setUser(null);\n  };\n\n  // Проверка авторизации\n  const isAuthenticated = !!user;\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для использования контекста авторизации\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
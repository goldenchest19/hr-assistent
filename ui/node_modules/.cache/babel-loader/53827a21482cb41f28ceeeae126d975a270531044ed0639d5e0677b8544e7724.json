{"ast":null,"code":"import axios from'axios';// Базовый URL API (в реальности будет указываться через окружение)\nconst API_BASE_URL='https://api.hr-partner.com/v1';// Создание экземпляра axios с общими настройками\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>Promise.reject(error));// API для работы с аутентификацией\nexport const authAPI={login:credentials=>api.post('/auth/login',credentials),register:userData=>api.post('/auth/register',userData),getCurrentUser:()=>api.get('/auth/me'),logout:()=>api.post('/auth/logout')};// API для работы с вакансиями\nexport const vacancyAPI={getAll:params=>api.get('/vacancies',{params}),getById:id=>api.get(\"/vacancies/\".concat(id)),create:data=>api.post('/vacancies',data),update:(id,data)=>api.put(\"/vacancies/\".concat(id),data),delete:id=>api.delete(\"/vacancies/\".concat(id)),import:url=>api.post('/vacancies/import',{url})};// API для работы с кандидатами\nexport const candidateAPI={getAll:params=>api.get('/candidates',{params}),getById:id=>api.get(\"/candidates/\".concat(id)),create:data=>api.post('/candidates',data),update:(id,data)=>api.put(\"/candidates/\".concat(id),data),delete:id=>api.delete(\"/candidates/\".concat(id)),import:data=>api.post('/candidates/import',data)};// API для работы с сопоставлением\nexport const matchingAPI={// Сопоставление по файлу резюме (PDF) и URL вакансии\nmatchResumeFileToVacancyUrl:(formData,vacancyUrl)=>{const data=new FormData();data.append('resume',formData.file);data.append('email',formData.email);data.append('vacancyUrl',vacancyUrl);return api.post('/matching/resume-file',data,{headers:{'Content-Type':'multipart/form-data'}});},// Сопоставление по URL резюме и URL вакансии\nmatchResumeUrlToVacancyUrl:(resumeUrl,vacancyUrl)=>{return api.post('/matching/resume-url',{resumeUrl,vacancyUrl});},// Сопоставление по текстовому резюме и URL вакансии\nmatchResumeTextToVacancyUrl:(resumeText,vacancyUrl)=>{return api.post('/matching/resume-text-vacancy-url',{resumeText,vacancyUrl});},// Сопоставление по файлу резюме (PDF) и текстовой вакансии\nmatchResumeFileToVacancyText:(formData,vacancyText)=>{const data=new FormData();data.append('resume',formData.file);data.append('email',formData.email);data.append('vacancyText',vacancyText);return api.post('/matching/resume-file-vacancy-text',data,{headers:{'Content-Type':'multipart/form-data'}});},// Сопоставление по URL резюме и текстовой вакансии\nmatchResumeUrlToVacancyText:(resumeUrl,vacancyText)=>{return api.post('/matching/resume-url-vacancy-text',{resumeUrl,vacancyText});},// Сопоставление по текстовому резюме и текстовой вакансии\nmatchResumeTextToVacancyText:(resumeText,vacancyText)=>{return api.post('/matching/resume-text-vacancy-text',{resumeText,vacancyText});},// Получение истории сопоставлений\ngetMatchingHistory:params=>api.get('/matching/history',{params}),// Получение сохраненного сопоставления по ID\ngetMatchingById:id=>api.get(\"/matching/\".concat(id))};// API для работы со статистикой\nexport const statsAPI={getDashboardStats:()=>api.get('/stats/dashboard'),getVacanciesStats:()=>api.get('/stats/vacancies'),getCandidatesStats:()=>api.get('/stats/candidates'),getMatchingStats:()=>api.get('/stats/matching')};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","authAPI","login","credentials","post","register","userData","getCurrentUser","get","logout","vacancyAPI","getAll","params","getById","id","data","update","put","delete","import","url","candidateAPI","matchingAPI","matchResumeFileToVacancyUrl","formData","vacancyUrl","FormData","append","file","email","matchResumeUrlToVacancyUrl","resumeUrl","matchResumeTextToVacancyUrl","resumeText","matchResumeFileToVacancyText","vacancyText","matchResumeUrlToVacancyText","matchResumeTextToVacancyText","getMatchingHistory","getMatchingById","statsAPI","getDashboardStats","getVacanciesStats","getCandidatesStats","getMatchingStats"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Базовый URL API (в реальности будет указываться через окружение)\nconst API_BASE_URL = 'https://api.hr-partner.com/v1';\n\n// Создание экземпляра axios с общими настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// API для работы с аутентификацией\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  getCurrentUser: () => api.get('/auth/me'),\n  logout: () => api.post('/auth/logout'),\n};\n\n// API для работы с вакансиями\nexport const vacancyAPI = {\n  getAll: (params) => api.get('/vacancies', { params }),\n  getById: (id) => api.get(`/vacancies/${id}`),\n  create: (data) => api.post('/vacancies', data),\n  update: (id, data) => api.put(`/vacancies/${id}`, data),\n  delete: (id) => api.delete(`/vacancies/${id}`),\n  import: (url) => api.post('/vacancies/import', { url }),\n};\n\n// API для работы с кандидатами\nexport const candidateAPI = {\n  getAll: (params) => api.get('/candidates', { params }),\n  getById: (id) => api.get(`/candidates/${id}`),\n  create: (data) => api.post('/candidates', data),\n  update: (id, data) => api.put(`/candidates/${id}`, data),\n  delete: (id) => api.delete(`/candidates/${id}`),\n  import: (data) => api.post('/candidates/import', data),\n};\n\n// API для работы с сопоставлением\nexport const matchingAPI = {\n  // Сопоставление по файлу резюме (PDF) и URL вакансии\n  matchResumeFileToVacancyUrl: (formData, vacancyUrl) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyUrl', vacancyUrl);\n    return api.post('/matching/resume-file', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n  },\n  \n  // Сопоставление по URL резюме и URL вакансии\n  matchResumeUrlToVacancyUrl: (resumeUrl, vacancyUrl) => {\n    return api.post('/matching/resume-url', { resumeUrl, vacancyUrl });\n  },\n  \n  // Сопоставление по текстовому резюме и URL вакансии\n  matchResumeTextToVacancyUrl: (resumeText, vacancyUrl) => {\n    return api.post('/matching/resume-text-vacancy-url', { resumeText, vacancyUrl });\n  },\n  \n  // Сопоставление по файлу резюме (PDF) и текстовой вакансии\n  matchResumeFileToVacancyText: (formData, vacancyText) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyText', vacancyText);\n    return api.post('/matching/resume-file-vacancy-text', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n  },\n  \n  // Сопоставление по URL резюме и текстовой вакансии\n  matchResumeUrlToVacancyText: (resumeUrl, vacancyText) => {\n    return api.post('/matching/resume-url-vacancy-text', { resumeUrl, vacancyText });\n  },\n  \n  // Сопоставление по текстовому резюме и текстовой вакансии\n  matchResumeTextToVacancyText: (resumeText, vacancyText) => {\n    return api.post('/matching/resume-text-vacancy-text', { resumeText, vacancyText });\n  },\n  \n  // Получение истории сопоставлений\n  getMatchingHistory: (params) => api.get('/matching/history', { params }),\n  \n  // Получение сохраненного сопоставления по ID\n  getMatchingById: (id) => api.get(`/matching/${id}`),\n};\n\n// API для работы со статистикой\nexport const statsAPI = {\n  getDashboardStats: () => api.get('/stats/dashboard'),\n  getVacanciesStats: () => api.get('/stats/vacancies'),\n  getCandidatesStats: () => api.get('/stats/candidates'),\n  getMatchingStats: () => api.get('/stats/matching'),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
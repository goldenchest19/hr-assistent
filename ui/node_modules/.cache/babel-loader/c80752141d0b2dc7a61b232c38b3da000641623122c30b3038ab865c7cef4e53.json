{"ast":null,"code":"import _objectSpread from\"/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useState,useContext,useEffect}from'react';// Создаем контекст авторизации\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY='hr_partner_auth';const USERS_STORAGE_KEY='hr_partner_users';export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Инициализация состояния из localStorage при загрузке\nuseEffect(()=>{const storedAuth=localStorage.getItem(AUTH_STORAGE_KEY);if(storedAuth){try{const parsedAuth=JSON.parse(storedAuth);setUser(parsedAuth.user);}catch(error){console.error('Ошибка при парсинге данных авторизации:',error);localStorage.removeItem(AUTH_STORAGE_KEY);}}// Проверяем, существуют ли зарегистрированные пользователи\nconst storedUsers=localStorage.getItem(USERS_STORAGE_KEY);if(!storedUsers){// Если пользователей нет, создаем админа по умолчанию\nconst defaultUsers=[{id:'1',email:'admin@example.com',password:'password',name:'Администратор',role:'admin'}];localStorage.setItem(USERS_STORAGE_KEY,JSON.stringify(defaultUsers));}setLoading(false);},[]);// Получение списка зарегистрированных пользователей\nconst getUsers=()=>{const storedUsers=localStorage.getItem(USERS_STORAGE_KEY);return storedUsers?JSON.parse(storedUsers):[];};// Функция для входа пользователя\nconst login=async(email,password)=>{return new Promise((resolve,reject)=>{setTimeout(()=>{const users=getUsers();const foundUser=users.find(user=>user.email===email&&user.password===password);if(foundUser){// Создаем копию пользователя без пароля для безопасности\nconst userData=_objectSpread({},foundUser);delete userData.password;// Сохраняем данные авторизации\nconst authData={user:userData,token:'mock-jwt-token'};// Сохраняем в localStorage\nlocalStorage.setItem(AUTH_STORAGE_KEY,JSON.stringify(authData));// Обновляем состояние\nsetUser(userData);resolve(userData);}else{reject(new Error('Неверный email или пароль'));}},1000);});};// Функция для регистрации\nconst register=async userData=>{return new Promise((resolve,reject)=>{setTimeout(()=>{const users=getUsers();// Проверка, существует ли пользователь с таким email\nconst existingUser=users.find(user=>user.email===userData.email);if(existingUser){reject(new Error('Пользователь с таким email уже существует'));return;}// Создаем нового пользователя\nconst newUser={id:String(users.length+1),email:userData.email,password:userData.password,name:userData.name||userData.email.split('@')[0],role:'user'};// Добавляем пользователя в список\nusers.push(newUser);localStorage.setItem(USERS_STORAGE_KEY,JSON.stringify(users));// Успешная регистрация\nresolve({success:true});},1000);});};// Функция для выхода пользователя\nconst logout=()=>{// Удаляем данные из localStorage\nlocalStorage.removeItem(AUTH_STORAGE_KEY);// Сбрасываем состояние\nsetUser(null);};// Проверка авторизации\nconst isAuthenticated=!!user;// Значение контекста\nconst value={user,loading,isAuthenticated,login,register,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Хук для использования контекста авторизации\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth должен использоваться внутри AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","AuthContext","AUTH_STORAGE_KEY","USERS_STORAGE_KEY","AuthProvider","_ref","children","user","setUser","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","error","console","removeItem","storedUsers","defaultUsers","id","email","password","name","role","setItem","stringify","getUsers","login","Promise","resolve","reject","setTimeout","users","foundUser","find","userData","_objectSpread","authData","token","Error","register","existingUser","newUser","String","length","split","push","success","logout","isAuthenticated","value","Provider","useAuth","context"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nconst AuthContext = createContext(null);\n\n// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\nconst USERS_STORAGE_KEY = 'hr_partner_users';\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    \n    // Проверяем, существуют ли зарегистрированные пользователи\n    const storedUsers = localStorage.getItem(USERS_STORAGE_KEY);\n    if (!storedUsers) {\n      // Если пользователей нет, создаем админа по умолчанию\n      const defaultUsers = [\n        {\n          id: '1',\n          email: 'admin@example.com',\n          password: 'password',\n          name: 'Администратор',\n          role: 'admin'\n        }\n      ];\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(defaultUsers));\n    }\n    \n    setLoading(false);\n  }, []);\n\n  // Получение списка зарегистрированных пользователей\n  const getUsers = () => {\n    const storedUsers = localStorage.getItem(USERS_STORAGE_KEY);\n    return storedUsers ? JSON.parse(storedUsers) : [];\n  };\n\n  // Функция для входа пользователя\n  const login = async (email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = getUsers();\n        const foundUser = users.find(\n          user => user.email === email && user.password === password\n        );\n        \n        if (foundUser) {\n          // Создаем копию пользователя без пароля для безопасности\n          const userData = { ...foundUser };\n          delete userData.password;\n          \n          // Сохраняем данные авторизации\n          const authData = {\n            user: userData,\n            token: 'mock-jwt-token'\n          };\n          \n          // Сохраняем в localStorage\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n          \n          // Обновляем состояние\n          setUser(userData);\n          \n          resolve(userData);\n        } else {\n          reject(new Error('Неверный email или пароль'));\n        }\n      }, 1000);\n    });\n  };\n\n  // Функция для регистрации\n  const register = async (userData) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = getUsers();\n        \n        // Проверка, существует ли пользователь с таким email\n        const existingUser = users.find(user => user.email === userData.email);\n        if (existingUser) {\n          reject(new Error('Пользователь с таким email уже существует'));\n          return;\n        }\n        \n        // Создаем нового пользователя\n        const newUser = {\n          id: String(users.length + 1),\n          email: userData.email,\n          password: userData.password,\n          name: userData.name || userData.email.split('@')[0],\n          role: 'user'\n        };\n        \n        // Добавляем пользователя в список\n        users.push(newUser);\n        localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n        \n        // Успешная регистрация\n        resolve({ success: true });\n      }, 1000);\n    });\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    // Удаляем данные из localStorage\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    // Сбрасываем состояние\n    setUser(null);\n  };\n\n  // Проверка авторизации\n  const isAuthenticated = !!user;\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для использования контекста авторизации\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext; "],"mappings":"0IAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,IAAI,CAAC,CAEvC;AACA,KAAM,CAAAO,gBAAgB,CAAG,iBAAiB,CAC1C,KAAM,CAAAC,iBAAiB,CAAG,kBAAkB,CAE5C,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAE5C;AACAE,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,UAAU,CAAGC,YAAY,CAACC,OAAO,CAACX,gBAAgB,CAAC,CACzD,GAAIS,UAAU,CAAE,CACd,GAAI,CACF,KAAM,CAAAG,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CACzCH,OAAO,CAACM,UAAU,CAACP,IAAI,CAAC,CAC1B,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,CAAEA,KAAK,CAAC,CAC/DL,YAAY,CAACO,UAAU,CAACjB,gBAAgB,CAAC,CAC3C,CACF,CAEA;AACA,KAAM,CAAAkB,WAAW,CAAGR,YAAY,CAACC,OAAO,CAACV,iBAAiB,CAAC,CAC3D,GAAI,CAACiB,WAAW,CAAE,CAChB;AACA,KAAM,CAAAC,YAAY,CAAG,CACnB,CACEC,EAAE,CAAE,GAAG,CACPC,KAAK,CAAE,mBAAmB,CAC1BC,QAAQ,CAAE,UAAU,CACpBC,IAAI,CAAE,eAAe,CACrBC,IAAI,CAAE,OACR,CAAC,CACF,CACDd,YAAY,CAACe,OAAO,CAACxB,iBAAiB,CAAEY,IAAI,CAACa,SAAS,CAACP,YAAY,CAAC,CAAC,CACvE,CAEAX,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAmB,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAAAT,WAAW,CAAGR,YAAY,CAACC,OAAO,CAACV,iBAAiB,CAAC,CAC3D,MAAO,CAAAiB,WAAW,CAAGL,IAAI,CAACC,KAAK,CAACI,WAAW,CAAC,CAAG,EAAE,CACnD,CAAC,CAED;AACA,KAAM,CAAAU,KAAK,CAAG,KAAAA,CAAOP,KAAK,CAAEC,QAAQ,GAAK,CACvC,MAAO,IAAI,CAAAO,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtCC,UAAU,CAAC,IAAM,CACf,KAAM,CAAAC,KAAK,CAAGN,QAAQ,CAAC,CAAC,CACxB,KAAM,CAAAO,SAAS,CAAGD,KAAK,CAACE,IAAI,CAC1B9B,IAAI,EAAIA,IAAI,CAACgB,KAAK,GAAKA,KAAK,EAAIhB,IAAI,CAACiB,QAAQ,GAAKA,QACpD,CAAC,CAED,GAAIY,SAAS,CAAE,CACb;AACA,KAAM,CAAAE,QAAQ,CAAAC,aAAA,IAAQH,SAAS,CAAE,CACjC,MAAO,CAAAE,QAAQ,CAACd,QAAQ,CAExB;AACA,KAAM,CAAAgB,QAAQ,CAAG,CACfjC,IAAI,CAAE+B,QAAQ,CACdG,KAAK,CAAE,gBACT,CAAC,CAED;AACA7B,YAAY,CAACe,OAAO,CAACzB,gBAAgB,CAAEa,IAAI,CAACa,SAAS,CAACY,QAAQ,CAAC,CAAC,CAEhE;AACAhC,OAAO,CAAC8B,QAAQ,CAAC,CAEjBN,OAAO,CAACM,QAAQ,CAAC,CACnB,CAAC,IAAM,CACLL,MAAM,CAAC,GAAI,CAAAS,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAChD,CACF,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAO,CAAAL,QAAQ,EAAK,CACnC,MAAO,IAAI,CAAAP,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtCC,UAAU,CAAC,IAAM,CACf,KAAM,CAAAC,KAAK,CAAGN,QAAQ,CAAC,CAAC,CAExB;AACA,KAAM,CAAAe,YAAY,CAAGT,KAAK,CAACE,IAAI,CAAC9B,IAAI,EAAIA,IAAI,CAACgB,KAAK,GAAKe,QAAQ,CAACf,KAAK,CAAC,CACtE,GAAIqB,YAAY,CAAE,CAChBX,MAAM,CAAC,GAAI,CAAAS,KAAK,CAAC,2CAA2C,CAAC,CAAC,CAC9D,OACF,CAEA;AACA,KAAM,CAAAG,OAAO,CAAG,CACdvB,EAAE,CAAEwB,MAAM,CAACX,KAAK,CAACY,MAAM,CAAG,CAAC,CAAC,CAC5BxB,KAAK,CAAEe,QAAQ,CAACf,KAAK,CACrBC,QAAQ,CAAEc,QAAQ,CAACd,QAAQ,CAC3BC,IAAI,CAAEa,QAAQ,CAACb,IAAI,EAAIa,QAAQ,CAACf,KAAK,CAACyB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACnDtB,IAAI,CAAE,MACR,CAAC,CAED;AACAS,KAAK,CAACc,IAAI,CAACJ,OAAO,CAAC,CACnBjC,YAAY,CAACe,OAAO,CAACxB,iBAAiB,CAAEY,IAAI,CAACa,SAAS,CAACO,KAAK,CAAC,CAAC,CAE9D;AACAH,OAAO,CAAC,CAAEkB,OAAO,CAAE,IAAK,CAAC,CAAC,CAC5B,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnB;AACAvC,YAAY,CAACO,UAAU,CAACjB,gBAAgB,CAAC,CACzC;AACAM,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED;AACA,KAAM,CAAA4C,eAAe,CAAG,CAAC,CAAC7C,IAAI,CAE9B;AACA,KAAM,CAAA8C,KAAK,CAAG,CACZ9C,IAAI,CACJE,OAAO,CACP2C,eAAe,CACftB,KAAK,CACLa,QAAQ,CACRQ,MACF,CAAC,CAED,mBACEnD,IAAA,CAACC,WAAW,CAACqD,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAA/C,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED;AACA,MAAO,MAAM,CAAAiD,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAG3D,UAAU,CAACI,WAAW,CAAC,CACvC,GAAI,CAACuD,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAd,KAAK,CAAC,mDAAmD,CAAC,CACtE,CACA,MAAO,CAAAc,OAAO,CAChB,CAAC,CAED,cAAe,CAAAvD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
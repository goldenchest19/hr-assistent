{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';// Создаем контекст авторизации\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);// Ключ для хранения данных в localStorage\nconst AUTH_STORAGE_KEY='hr_partner_auth';export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Инициализация состояния из localStorage при загрузке\nuseEffect(()=>{const storedAuth=localStorage.getItem(AUTH_STORAGE_KEY);if(storedAuth){try{const parsedAuth=JSON.parse(storedAuth);setUser(parsedAuth.user);}catch(error){console.error('Ошибка при парсинге данных авторизации:',error);localStorage.removeItem(AUTH_STORAGE_KEY);}}setLoading(false);},[]);// Функция для входа пользователя\nconst login=async(email,password)=>{// В реальном приложении здесь будет запрос к API\nreturn new Promise((resolve,reject)=>{setTimeout(()=>{// Временная заглушка для авторизации\nif(email==='admin@example.com'&&password==='password'){const userData={id:'1',email,name:'Администратор',role:'admin'};// Сохраняем данные авторизации\nconst authData={user:userData,token:'mock-jwt-token'};// Сохраняем в localStorage\nlocalStorage.setItem(AUTH_STORAGE_KEY,JSON.stringify(authData));// Обновляем состояние\nsetUser(userData);resolve(userData);}else{reject(new Error('Неверный email или пароль'));}},1000);});};// Функция для регистрации\nconst register=async userData=>{// В реальном приложении здесь будет запрос к API\nreturn new Promise(resolve=>{setTimeout(()=>{console.log('Регистрация пользователя:',userData);resolve({success:true});},1000);});};// Функция для выхода пользователя\nconst logout=()=>{// Удаляем данные из localStorage\nlocalStorage.removeItem(AUTH_STORAGE_KEY);// Сбрасываем состояние\nsetUser(null);};// Проверка авторизации\nconst isAuthenticated=!!user;// Значение контекста\nconst value={user,loading,isAuthenticated,login,register,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Хук для использования контекста авторизации\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth должен использоваться внутри AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","AuthContext","AUTH_STORAGE_KEY","AuthProvider","_ref","children","user","setUser","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","error","console","removeItem","login","email","password","Promise","resolve","reject","setTimeout","userData","id","name","role","authData","token","setItem","stringify","Error","register","log","success","logout","isAuthenticated","value","Provider","useAuth","context"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nconst AuthContext = createContext(null);\n\n// Ключ для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Функция для входа пользователя\n  const login = async (email, password) => {\n    // В реальном приложении здесь будет запрос к API\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Временная заглушка для авторизации\n        if (email === 'admin@example.com' && password === 'password') {\n          const userData = {\n            id: '1',\n            email,\n            name: 'Администратор',\n            role: 'admin'\n          };\n          \n          // Сохраняем данные авторизации\n          const authData = {\n            user: userData,\n            token: 'mock-jwt-token'\n          };\n          \n          // Сохраняем в localStorage\n          localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n          \n          // Обновляем состояние\n          setUser(userData);\n          \n          resolve(userData);\n        } else {\n          reject(new Error('Неверный email или пароль'));\n        }\n      }, 1000);\n    });\n  };\n\n  // Функция для регистрации\n  const register = async (userData) => {\n    // В реальном приложении здесь будет запрос к API\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        console.log('Регистрация пользователя:', userData);\n        resolve({ success: true });\n      }, 1000);\n    });\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    // Удаляем данные из localStorage\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    // Сбрасываем состояние\n    setUser(null);\n  };\n\n  // Проверка авторизации\n  const isAuthenticated = !!user;\n\n  // Значение контекста\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для использования контекста авторизации\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n        setToken(parsedAuth.token);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Функция для входа пользователя через API\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Неверный email или пароль');\n      }\n      const data = await response.json();\n      // data должен содержать токен и/или пользователя\n      const authData = {\n        user: {\n          email\n        },\n        // Можно доработать, если backend возвращает больше данных\n        token: data.token || data.accessToken || data.jwt || data.tokenValue || data // универсально\n      };\n      localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n      setUser(authData.user);\n      setToken(authData.token);\n      return authData.user;\n    } catch (error) {\n      throw new Error(error.message || 'Ошибка при авторизации');\n    }\n  };\n\n  // Функция для регистрации через API\n  const register = async userData => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: userData.name || userData.email.split('@')[0],\n          email: userData.email,\n          password: userData.password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка при регистрации');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(error.message || 'Ошибка при регистрации');\n    }\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    setUser(null);\n    setToken(null);\n  };\n  const isAuthenticated = !!user && !!token;\n  const value = {\n    user,\n    token,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n// Хук для использования контекста авторизации\n_s(AuthProvider, \"uAkFQMmIUxfxJcQTEb8tCM/KFt4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AUTH_STORAGE_KEY","AuthProvider","children","_s","user","setUser","token","setToken","loading","setLoading","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","error","console","removeItem","login","email","password","response","fetch","method","headers","body","stringify","ok","Error","data","json","authData","accessToken","jwt","tokenValue","setItem","message","register","userData","username","name","split","errorData","logout","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Создаем контекст авторизации\nconst AuthContext = createContext(null);\n\n// Ключи для хранения данных в localStorage\nconst AUTH_STORAGE_KEY = 'hr_partner_auth';\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Инициализация состояния из localStorage при загрузке\n  useEffect(() => {\n    const storedAuth = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        setUser(parsedAuth.user);\n        setToken(parsedAuth.token);\n      } catch (error) {\n        console.error('Ошибка при парсинге данных авторизации:', error);\n        localStorage.removeItem(AUTH_STORAGE_KEY);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Функция для входа пользователя через API\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n      if (!response.ok) {\n        throw new Error('Неверный email или пароль');\n      }\n      const data = await response.json();\n      // data должен содержать токен и/или пользователя\n      const authData = {\n        user: { email }, // Можно доработать, если backend возвращает больше данных\n        token: data.token || data.accessToken || data.jwt || data.tokenValue || data, // универсально\n      };\n      localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n      setUser(authData.user);\n      setToken(authData.token);\n      return authData.user;\n    } catch (error) {\n      throw new Error(error.message || 'Ошибка при авторизации');\n    }\n  };\n\n  // Функция для регистрации через API\n  const register = async (userData) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: userData.name || userData.email.split('@')[0],\n          email: userData.email,\n          password: userData.password,\n        }),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка при регистрации');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(error.message || 'Ошибка при регистрации');\n    }\n  };\n\n  // Функция для выхода пользователя\n  const logout = () => {\n    localStorage.removeItem(AUTH_STORAGE_KEY);\n    setUser(null);\n    setToken(null);\n  };\n\n  const isAuthenticated = !!user && !!token;\n\n  const value = {\n    user,\n    token,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Хук для использования контекста авторизации\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен использоваться внутри AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\n\n// Базовый URL API (в реальности будет указываться через окружение)\nconst API_BASE_URL = 'https://api.hr-partner.com/v1';\n\n// Создание экземпляра axios с общими настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// API для работы с аутентификацией\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getCurrentUser: () => api.get('/auth/me'),\n  logout: () => api.post('/auth/logout')\n};\n\n// API для работы с вакансиями\nexport const vacancyAPI = {\n  getAll: params => api.get('/vacancies', {\n    params\n  }),\n  getById: id => api.get(`/vacancies/${id}`),\n  create: data => api.post('/vacancies', data),\n  update: (id, data) => api.put(`/vacancies/${id}`, data),\n  delete: id => api.delete(`/vacancies/${id}`),\n  import: url => api.post('/vacancies/import', {\n    url\n  })\n};\n\n// API для работы с кандидатами\nexport const candidateAPI = {\n  getAll: params => api.get('/candidates', {\n    params\n  }),\n  getById: id => api.get(`/candidates/${id}`),\n  create: data => api.post('/candidates', data),\n  update: (id, data) => api.put(`/candidates/${id}`, data),\n  delete: id => api.delete(`/candidates/${id}`),\n  import: data => api.post('/candidates/import', data)\n};\n\n// API для работы с сопоставлением\nexport const matchingAPI = {\n  // Сопоставление по файлу резюме (PDF) и URL вакансии\n  matchResumeFileToVacancyUrl: (formData, vacancyUrl) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyUrl', vacancyUrl);\n    return api.post('/matching/resume-file', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Сопоставление по URL резюме и URL вакансии\n  matchResumeUrlToVacancyUrl: (resumeUrl, vacancyUrl) => {\n    return api.post('/matching/resume-url', {\n      resumeUrl,\n      vacancyUrl\n    });\n  },\n  // Сопоставление по текстовому резюме и URL вакансии\n  matchResumeTextToVacancyUrl: (resumeText, vacancyUrl) => {\n    return api.post('/matching/resume-text-vacancy-url', {\n      resumeText,\n      vacancyUrl\n    });\n  },\n  // Сопоставление по файлу резюме (PDF) и текстовой вакансии\n  matchResumeFileToVacancyText: (formData, vacancyText) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyText', vacancyText);\n    return api.post('/matching/resume-file-vacancy-text', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Сопоставление по URL резюме и текстовой вакансии\n  matchResumeUrlToVacancyText: (resumeUrl, vacancyText) => {\n    return api.post('/matching/resume-url-vacancy-text', {\n      resumeUrl,\n      vacancyText\n    });\n  },\n  // Сопоставление по текстовому резюме и текстовой вакансии\n  matchResumeTextToVacancyText: (resumeText, vacancyText) => {\n    return api.post('/matching/resume-text-vacancy-text', {\n      resumeText,\n      vacancyText\n    });\n  },\n  // Получение истории сопоставлений\n  getMatchingHistory: params => api.get('/matching/history', {\n    params\n  }),\n  // Получение сохраненного сопоставления по ID\n  getMatchingById: id => api.get(`/matching/${id}`)\n};\n\n// API для работы со статистикой\nexport const statsAPI = {\n  getDashboardStats: () => api.get('/stats/dashboard'),\n  getVacanciesStats: () => api.get('/stats/vacancies'),\n  getCandidatesStats: () => api.get('/stats/candidates'),\n  getMatchingStats: () => api.get('/stats/matching')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","authAPI","login","credentials","post","register","userData","getCurrentUser","get","logout","vacancyAPI","getAll","params","getById","id","data","update","put","delete","import","url","candidateAPI","matchingAPI","matchResumeFileToVacancyUrl","formData","vacancyUrl","FormData","append","file","email","matchResumeUrlToVacancyUrl","resumeUrl","matchResumeTextToVacancyUrl","resumeText","matchResumeFileToVacancyText","vacancyText","matchResumeUrlToVacancyText","matchResumeTextToVacancyText","getMatchingHistory","getMatchingById","statsAPI","getDashboardStats","getVacanciesStats","getCandidatesStats","getMatchingStats"],"sources":["/Users/admin/Desktop/ai_projects/hr-partner/UI/hr-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Базовый URL API (в реальности будет указываться через окружение)\nconst API_BASE_URL = 'https://api.hr-partner.com/v1';\n\n// Создание экземпляра axios с общими настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// API для работы с аутентификацией\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  getCurrentUser: () => api.get('/auth/me'),\n  logout: () => api.post('/auth/logout'),\n};\n\n// API для работы с вакансиями\nexport const vacancyAPI = {\n  getAll: (params) => api.get('/vacancies', { params }),\n  getById: (id) => api.get(`/vacancies/${id}`),\n  create: (data) => api.post('/vacancies', data),\n  update: (id, data) => api.put(`/vacancies/${id}`, data),\n  delete: (id) => api.delete(`/vacancies/${id}`),\n  import: (url) => api.post('/vacancies/import', { url }),\n};\n\n// API для работы с кандидатами\nexport const candidateAPI = {\n  getAll: (params) => api.get('/candidates', { params }),\n  getById: (id) => api.get(`/candidates/${id}`),\n  create: (data) => api.post('/candidates', data),\n  update: (id, data) => api.put(`/candidates/${id}`, data),\n  delete: (id) => api.delete(`/candidates/${id}`),\n  import: (data) => api.post('/candidates/import', data),\n};\n\n// API для работы с сопоставлением\nexport const matchingAPI = {\n  // Сопоставление по файлу резюме (PDF) и URL вакансии\n  matchResumeFileToVacancyUrl: (formData, vacancyUrl) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyUrl', vacancyUrl);\n    return api.post('/matching/resume-file', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n  },\n  \n  // Сопоставление по URL резюме и URL вакансии\n  matchResumeUrlToVacancyUrl: (resumeUrl, vacancyUrl) => {\n    return api.post('/matching/resume-url', { resumeUrl, vacancyUrl });\n  },\n  \n  // Сопоставление по текстовому резюме и URL вакансии\n  matchResumeTextToVacancyUrl: (resumeText, vacancyUrl) => {\n    return api.post('/matching/resume-text-vacancy-url', { resumeText, vacancyUrl });\n  },\n  \n  // Сопоставление по файлу резюме (PDF) и текстовой вакансии\n  matchResumeFileToVacancyText: (formData, vacancyText) => {\n    const data = new FormData();\n    data.append('resume', formData.file);\n    data.append('email', formData.email);\n    data.append('vacancyText', vacancyText);\n    return api.post('/matching/resume-file-vacancy-text', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n  },\n  \n  // Сопоставление по URL резюме и текстовой вакансии\n  matchResumeUrlToVacancyText: (resumeUrl, vacancyText) => {\n    return api.post('/matching/resume-url-vacancy-text', { resumeUrl, vacancyText });\n  },\n  \n  // Сопоставление по текстовому резюме и текстовой вакансии\n  matchResumeTextToVacancyText: (resumeText, vacancyText) => {\n    return api.post('/matching/resume-text-vacancy-text', { resumeText, vacancyText });\n  },\n  \n  // Получение истории сопоставлений\n  getMatchingHistory: (params) => api.get('/matching/history', { params }),\n  \n  // Получение сохраненного сопоставления по ID\n  getMatchingById: (id) => api.get(`/matching/${id}`),\n};\n\n// API для работы со статистикой\nexport const statsAPI = {\n  getDashboardStats: () => api.get('/stats/dashboard'),\n  getVacanciesStats: () => api.get('/stats/vacancies'),\n  getCandidatesStats: () => api.get('/stats/candidates'),\n  getMatchingStats: () => api.get('/stats/matching'),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}